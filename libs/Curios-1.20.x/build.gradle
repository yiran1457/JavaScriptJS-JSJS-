import javax.net.ssl.HttpsURLConnection
import java.nio.charset.StandardCharsets

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

version = "${mod_version}"
group = "top.theillusivec4.${mod_id}"

base {
    archivesName = "${mod_id}-forge"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2023.08.20-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                curios {
                    source sourceSets.main
                }
                curiostest {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                curios {
                    source sourceSets.main
                }
                curiostest {
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', 'curiostest', '--all', '--output', file('src/generated/resources/')

            arg "-mixin.config=" + "${mod_id}".toString() + ".mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                curios {
                    source sourceSets.main
                }
                curiostest {
                    source sourceSets.test
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_forge}"

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:${version_jei}")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:${version_jei}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:${version_jei}")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : "${mod_id}",
                    "Specification-Vendor"    : "${mod_author}",
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : "${mod_id}",
                    "Implementation-Version"  : "${mod_version}",
                    "Implementation-Vendor"   : "${mod_author}",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs"            : "${mod_id}.mixins.json"],)
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    include 'top/theillusivec4/curios/api/**/*'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

artifacts {
    archives apiJar
    archives sourcesJar
}

jar.finalizedBy('reobfJar')

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = findProperty('curseKey')
//    debugMode = true
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, jar)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('CHANGELOG_LATEST.md')
    mainFile.releaseType = "${release_type}"
    "${release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addModLoader("Forge")
    mainFile.addModLoader("NeoForge")
    mainFile.withAdditionalFile(sourcesJar)
    mainFile.withAdditionalFile(apiJar)

    doLast {

        if (project.hasProperty('cf_page') && mainFile.curseFileId != null) {
            project.ext.curse_link = "${cf_page}/files/${mainFile.curseFileId}"
        }
    }
}

modrinth {
    token = findProperty('modrinthKey') ?: ""
//    debugMode = true
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('CHANGELOG_LATEST.md').text
    uploadFile = jar
    loaders = ["forge", "neoforge"]
    additionalFiles = [sourcesJar, apiJar]
    gameVersions = "${release_versions}".split(",") as List<String>
}

tasks.modrinth.doLast {

    if (project.hasProperty('modrinth_page') && tasks.modrinth.newVersion != null) {
        project.ext.modrinth_link = "${modrinth_page}/version/${tasks.modrinth.newVersion.id}"
    }
}

publishing {

    publications {

        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName

            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories {

        if (project.hasProperty('urlMaven')) {

            if (project.hasProperty('userMaven') && project.hasProperty('passMaven')) {

                maven {
                    url urlMaven
                    credentials {
                        username userMaven
                        password passMaven
                    }
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

def publishDiscord() {
    try {
        def cfLinks = new StringJoiner('\\\\n')

        if (project.hasProperty('curse_link')) {
            cfLinks.add("[Download](${project.findProperty('curse_link')})")
        }
        def modrinthLinks = new StringJoiner('\\\\n')

        if (project.hasProperty('modrinth_link')) {
            modrinthLinks.add("[Download](${project.findProperty('modrinth_link')})")
        }
        println(cfLinks)
        println(modrinthLinks)
        def changelog = file("CHANGELOG_LATEST.md").getText()
        changelog = changelog.substring(changelog.indexOf("##"))
        changelog = changelog.replaceAll("\r\n","\\\\r\\\\n").replaceAll("\"","\\\\\"")

        if (changelog.length() >= 1024) {
            changelog = changelog.substring(0, 900)
            changelog = changelog + "...[(See more)](https://github.com/TheIllusiveC4/Curios/blob/1.20.x/CHANGELOG_LATEST.md)"
        }
        println(changelog)
        int color = 65392

        if (release_type == "beta") {
            color = 16763904
        } else if (release_type == "alpha") {
            color = 16724273
        }
        final String message = """
            {
              "embeds": [
                {
                  "title": "${mod_name} ${version}",
                  "color": ${color},
                  "fields": [
                    {
                      "name": "Minecraft Versions",
                      "value": "${release_versions.replaceAll(",", ", ")}"
                    },
                    {
                      "name": "CurseForge",
                      "value": "${cfLinks}",
                      "inline": true
                    },
                    {
                      "name": "Modrinth",
                      "value": "${modrinthLinks}",
                      "inline": true
                    },
                    {
                      "name": "Changelog",
                      "value": "${changelog}"
                    }
                  ],
                  "thumbnail": {
                    "url": "${discord_thumbnail}"
                  }
                }
              ]
            }
            """
        println(message)
        final URL url = new URL("${discordWebhook}")
        final HttpsURLConnection connection = (HttpsURLConnection) url.openConnection()
        connection.addRequestProperty("Content-Type", "application/json; charset=UTF-8")
        connection.addRequestProperty("User-Agent", "${mod_name} Gradle Upload")
        connection.setDoOutput(true)
        connection.setRequestMethod("POST")
        connection.connect()

        try (OutputStream out = connection.getOutputStream()) {
            out.write(message.getBytes(StandardCharsets.UTF_8))
        }
        connection.getInputStream().close()
        connection.disconnect()
    } catch (IOException e) {
        e.printStackTrace()
    }
}

tasks.named('publishCurseForge').configure {
    mustRunAfter('assemble')
}

tasks.register('publishForge') {
    dependsOn 'modrinth'
    dependsOn 'publishCurseForge'

    doLast {
        publishDiscord()
    }
}
